import React from "react";
import Theory from "../Reuse/Theory";
import Question from "../Reuse/Question";
import swal from "sweetalert";
import { Button } from "@mui/material";
import Quiz from "../Reuse/Quiz";
import { useDispatch, useSelector } from "react-redux";
import axios from "axios";
import { addtabs } from "../redux/userDispatch";

function Milestonefive() {
    const [page, setPage] = React.useState(0);
    const tabs = useSelector((state) => state.levels);
    const user = useSelector((state) => state.user.username);
    const dispatch = useDispatch();
    React.useEffect(() => {
        setPage(Number(tabs.tabs));
    }, []);

    function renderQ() {
        let nextTabs = Number(tabs.tabs) + 1;
        dispatch(addtabs(nextTabs));
        setPage(page + 1);

    }

    function Completed() {
        swal("Congrat on Completing Milestone 5");
        return (<center><Button style={{ marginTop: "40%" }}>Next Milestone</Button></center>);
    }

    return (
        <div>
            {page === 0 && < Quiz question="How do you declare a pointer to an integer in C?" one="int ptr;" two="int *ptr;" three="ptr int;" four="*int ptr;" soln="int *ptr;" renderQ={renderQ} />}
            {page === 1 && <Theory heading="What is a Pointer in C?" theory=<pre > {"Pointer is a variable that stores the memory address of another variable. Instead of holding a data value,\n it holds the location in memory where the data is stored. This allows C programs to access and manipulate\n data stored in memory directly.With pointers, you can access and modify the data located in the memory,\n pass the data efficiently between the functions, and create dynamic data structures like linked lists,\n trees, and graphs.\n\n•A pointer points to the memory location of another variable.\n•You can access and modify the value stored at the location a pointer points to using dereferencing.\n•To declare a pointer, use the dereferencing operator (*) followed by the data type.\n\nSyntax:-   type *var-name;\nHere, type is the pointer's base type; it must be a valid C data type and var-name is the name of the\npointer variable. The asterisk * used to declare a pointer is the same asterisk used for multiplication.\nHowever, in this statement, the asterisk is being used to designate a variable as a pointer.\n\nHow to Use Pointers?\nTo use the pointers in C language, you need to declare a pointer variable, then initialize it with the\naddress of another variable, and then you can use it by dereferencing to get and change the value of the\nvariables pointed by the pointer."} </pre> renderQ={renderQ} />}
            {page === 2 && <Theory heading="How to Use Pointers?" theory=<pre> {"You can use pointers with any type of variable such as integer, float, string, etc. You can also use\n pointers with derived data types such as array, structure, union, etc.\n\n1) Pointer Initialization: After declaring a pointer variable, you need to initialize it with the address\n   of another variable using the address of (&) operator. This process is known as referencing a pointer.\n\n   Syntax: The following is the syntax to initialize a pointer variable –\n            pointer_variable = &variable;\n\n   Example: Here is an example of pointer initialization –\n              int x = 10;\n              int *ptr = &x;\n   Here, x is an integer variable, ptr is an integer pointer. The pointer ptr is being initialized with x.'\n\n2) Dereferencing a Pointer: Dereferencing a pointer means accessing the value stored at the memory location\n the pointer points to. This is done using the * operator (same operator as used for declaring the pointer).\n•The & Operator − It is also known as the 'Address-of operator'. It is used for Referencing which means\n taking the address of an existing variable (using &) to set a pointer variable.\n•The * Operator − It is also known as the 'dereference operator'. Dereferencing a pointer is carried out\n using the * operator to get the value from the memory address that is pointed by the pointer.Pointers \nare used to pass parameters by reference."}</pre> renderQ={renderQ} />}
            {page === 3 && < Quiz question="Given the following array declaration: int arr[3] = {10, 20, 30};" one="The first element of the array" two="The address of the array" three="A pointer to the first element of the array" four="All of the Above" soln="All of the Above" renderQ={renderQ} />}
            {page === 4 && <Theory heading="How to Use Pointers?" theory=<pre> {"This is useful if a programmer wants a function's modifications to a parameter to be visible to the\n function's caller. This is also useful for returning multiple values from a function.\n\n  Example:-  int x = 10;int *ptr = &x;\n             printf('%d', *ptr);     // Outputs: 10\n  Here, *ptr accesses the value stored at the address held by ptr, which is 10.\n\n\n• Access and Manipulate Values using Pointer: The value of the variable which is pointed by a pointer\n  can be accessed and manipulated by using the pointer variable. You need to use the asterisk (*) sign\n  with the pointer variable to access and manipulate the variable's value.\n\n• Size of a Pointer Variable: The memory (or, size) occupied by a pointer variable does not depend on the\n  type of the variable it is pointing to. The size of a pointer depends on the system architecture."} </pre> renderQ={renderQ}></Theory>}
            {page === 5 && <Theory heading="Pointers and Arrays in C" theory=<pre> {"In C programming, the concepts of arrays and pointers have a very important role. There is also a close\n association between the two. In this chapter, we will explain in detail the relationship between arrays\n and pointers in C programming.\n\n• Arrays in C: An array in C is a homogenous collection of elements of a single data type stored in a\ncontinuous block of memory. The size of an array is an integer inside square brackets, put in\nfront of the name of the array.\n\n• Declaring an Array: To declare an array, the following syntax is used −   data_type arr_name[size];\nEach element in the array is identified by a unique incrementing index, starting from\n'0'. An array can be declared and initialized in different ways.You can declare an array and then\ninitialize it later in the code, as and when required.\n\nFor example −       int arr[5];\n                    ... \n                    a[0] = 1;\n                    a[1] = 2;\n                    ... \nYou can also declare and initialize an array at the same time. The values to be stored are put as a\ncomma separated list inside curly brackets."}</pre> renderQ={renderQ}></Theory>}
            {page === 6 && <Theory heading="Pointers and Arrays in C" theory=<pre> {"Pointers in C: A pointer is a variable that stores the address of another variable. In C, the symbol (&)\n is used as the address-of operator. The value returned by this operator is assigned to a pointer.\n\nTo declare a variable as a pointer, you need to put an asterisk (*) before the name. Also, the type of\npointer variable must be the same as the type of the variable whose address it stores.\nIn this code snippet, 'b' is an integer pointer that stores the address of an integer variable 'a' −\n         int a = 5;\n         int *b = &a;"}</pre> renderQ={renderQ} ></Theory>}
            {page === 7 && <Theory heading="Applications of Pointers in C" renderQ={renderQ} theory=<pre> {"One of the most important features of C is that it provides low-level memory access with the concept of\n pointers. A pointer is a variable that stores the address of another variable in the memory. Some of the\n Applications of Pointers\n  1. To Access Array Elements\n  2. Allocating Memory Dynamically\n  3. For Passing Arguments as Reference\n  4. For Passing an Array to Function\n  5. For Returning Multiple Values from a Function\n\na) To Access Array Elements:- Array elements can also be accessed through the pointer. You need to declare\nand initialize a pointer to an array and using it you can access each element by incrementing the pointer\nvariable by 1.The pointer to an array is the address of its 0th element. When the array pointer is\nincremented by 1, it points to the next element in the array.\n\nOutput:- Run the code and check its output −\n         arr[0]: 1\n         arr[1]: 2\n         arr[2]: 3\n         arr[3]: 4"} </pre> ></Theory>}
            {page === 8 && <Theory heading="Applications of Pointers in C" renderQ={renderQ} theory=<pre> {"#include <stdio.h>\nint main(){\n   int arr[] = {1,2,3,4,5};\n   int *ptr = arr;\n\n   for(int i = 0; i <= 4; i++){\n      printf('arr[%d]: %d', i, *ptr);\n      ptr++;\n   }\n    return 0;\n}\n\nExample: The following example demonstrates how you can traverse an array with the help of its pointer."} </pre> ></Theory>}
            {page === 9 && < Quiz question="Which of the following is a common use of pointers in C?" one="Dynamic memory allocation" two=" Passing arguments to functions by reference" three="Array manipulation" four="All of the above" soln="All of the above" renderQ={renderQ} />}
            {page === 10 && <Theory heading="Applications of Pointers in C" renderQ={renderQ} theory=<pre> {"b) For Allocating Memory Dynamically:- One of the most important applications of C pointers is to declare\n memory for the variables dynamically. There are various situations, where static memory allocation cannot\n solve the problem, such as dealing with large size of arrays, structures having n numbers of students and\n employees, etc.Thus, whenever you need to allocate memory dynamically, pointers play an important role in\n it. C language provides some of the functions to allocate and release the memory dynamically.\n\n The functions are:\n1. malloc() function:Allocates an array of num elements each of which size in bytes will be size.\n2. calloc() functionAllocates an array of num bytes and leaves them uninitialized.\n3. realloc() function:Reallocates memory extending it up to newsize.\n\nc) For Passing Arguments as Reference:-\nWhen a function is called by reference, the address of the actual argument variables passed, instead of\ntheir values.Passing a pointer to a function has two advantages −\n\n1. First, it overcomes the limitation of pass by value. Changes to the value inside the called function are\n done directly at the address stored in the pointer. Hence, we can manipulate the variables in one scope\n from another.\n\n2. Second, it also overcomes the limitation of a function in that it can return only one expression.\n  By passing pointers, the effect of processing a function takes place directly at the address. Secondly,\n  more than one value can be returned if we return the pointer of an array or struct variable."} </pre> ></Theory>}
            {page === 11 && <Theory heading="Applications of Pointers in C" renderQ={renderQ} theory=<pre> {"Example:- /* function definition to swap the values */\n int swap(int *x, int *y){\n   int z;\n   z = *x;    /* save the value at address x */\n   *x = *y;   /* put y into x */\n   *y = z;    /* put z into y */\n   return 0;\n\nd) For Passing an Array to Function:-\nLet us use these characteristics for passing the array by reference. In the main() function, we declare an\narray and pass its address to the max() function.The max() function traverses the array using the pointer\nand returns the largest number in the array, back to the main() function.\n\ne) For Returning Multiple Values from a Function:-\nIn C language, the functions can have only one return statement to return one value at a time. With the help\nof C pointers, you can return multiple values from a function by passing arguments as references."} </pre> ></Theory>}
            {page === 12 && <Theory heading="Applications of Pointers in C" renderQ={renderQ} theory=<pre> {"def process_numbers(numbers):\n   # Calculate the sum and the average of the numbers\n    total = sum(numbers)\n    average = total / len(numbers) if numbers else 0\n    return total, average  # Returning multiple values as a tuple\n\n# Example usage\nnumber_list = [10, 20, 30, 40, 50]\ntotal_sum, avg = process_numbers(number_list)\n\nprint(f'Total Sum: {total_sum}')\nprint(f'Average: {avg})"} </pre> ></Theory>}
            {page === 13 && <Theory heading="Pointer to Pointer (Double Pointer) in C" renderQ={renderQ} theory=<pre> {"What is a Double Pointer in C?\nA pointer to pointer which is also known as a double pointer in C is used to store the address of another\npointer.\n\nA variable in C that stores the address of another variable is known as a pointer. A pointer variable can\nstore the address of any type including the primary data types, arrays, struct types, etc. Likewise, a\npointer can store the address of another pointer too, in which case it is called 'pointer to pointer'\n(also called 'double pointer').\n\nA 'pointer to a pointer' is a form of multiple indirection or a chain of pointers. Normally, a pointer\n contains the address of a variable. When we define a 'pointer to a pointer', the first pointer contains the\n address of the second pointer, which points to the location that contains the actual value as shown below –\n\na) Declaration of Pointer to a Pointer:-\nThe declaration of a pointer to pointer (double pointer) is similar to the declaration of a pointer, the only\ndifference is that you need to use an additional asterisk (*) before the pointer variable name.\n\nExample:-   int **var;\n\nWhen a target value is indirectly pointed to by a 'pointer to a pointer', accessing that value requires that\nthe asterisk operator be applied twice."} </pre> ></Theory>}
            {page === 14 && <Theory heading="Pointer to Pointer (Double Pointer) in C" renderQ={renderQ} theory=<pre> {"b) How Does a Normal Pointer Work in C?\nAssume that an integer variable 'a' is located at an arbitrary address 1000. Its pointer variable is 'b' \nand the compiler allocates it the address 2000. The following image presents a visual depiction −\n\nLet us declare a pointer to int type and store the address of an int variable in it.\n       int a = 10;\n       int *b = &a;\n\nThe dereference operator fetches the value via the pointer.\nprintf('a: %d Pointer to a is b: %d Value at b: %d', a, b, *b);\n\nc) How Does a Double Pointer Work?\nLet us now declare a pointer that can store the address of 'b', which itself is a pointer to int type\n written as 'int *'.\n\nLet's assume that the compiler also allocates it the address 3000.\nHence, 'c' is a pointer to a pointer to int, and should be declared as 'int **'.\n       int **c = &b;\n       printf('b: %d Pointer to 'b' is 'c': %d Value at b: %d', b, c, *c);\n\nYou get the value of 'b' (which is the address of 'a'), the value of 'c' (which is the address of 'b':),\n and the dereferenced value from 'c' (which is the address of 'a') "} </pre> ></Theory>}
            {page === 15 && <Theory heading="Pointer to Pointer (Double Pointer) in C" renderQ={renderQ} theory=<pre> {"A NULL pointer in C is a pointer that doesn't point to any of the memory locations. The NULL constant is\n defined in the header files stdio.h, stddef.h as well as stdlib.h.\n\nA pointer is initialized to NULL to avoid the unpredicted behavior of a program or to prevent segmentation\n fault errors.\n\nDeclare and Initialize a NULL Pointer: This is how you would declare and initialize a NULL pointer −\ntype *ptr = NULL; Or, you can use this syntax too −\n\n       type *ptr = 0;\n\nExample of a NULL Pointer:-The following example demonstrates how to declare and initialize a NULL pointer −\n#include <stdio.h>\nint main() {\n   int *p= NULL;//initialize the pointer as null.\n   printf('The value of pointer is %u',p);\n   return 0;\n}\n\nOutput :-When you run this code, it will produce the following output −The value of pointer is 0."} </pre> ></Theory>}
            {page === 16 && <Theory heading="NULL Pointer in C" renderQ={renderQ} theory=<pre> {"In C language, an array is a group of similar values kept together in memory. Each value, or element, in\n the array can be accessed using one or more unique numbers called indices.A pointer, however, is a variable\n that holds the address of another variable. The address of the first element in an array is known as the\n array's pointer. You can use a special symbol called the 'dereference operator' to get the value at the\n address a pointer points to.\n\n You can create one-dimensional, two-dimensional, or multi-dimensional arrays in C. 'Dimension' refers to\n how many indices you need to find a specific element in the array\n\n Declare and Initialize a NULL Pointer: This is how you would declare and initialize a NULL pointer −\n          type *ptr = NULL;    Or    type *ptr = 0;"} </pre> ></Theory>}
            {page === 17 && <Theory heading="NULL Pointer in C" renderQ={renderQ} theory=<pre> {"Example of a NULL Pointer:-The following example demonstrates how to declare and initialize a NULL\n pointer −    #include <stdio.h> \n              int main() {\n                int *p= NULL;  //initialize the pointer as null.\n                printf('The value of pointer is %u',p);\n                return 0;\n              }\n\n Output :-When you run this code, it will produce the following output −\n           The value of pointer is 0."} </pre> ></Theory>}
            {page === 18 && <Theory heading="Pointers and  Multidimensional Arrays in C" renderQ={renderQ} theory=<pre> {"In C language, an array is a group of similar values kept together in memory. Each value, or element, in\n the array can be accessed using one or more unique numbers called indices.A pointer, however, is a variable\n that holds the address of another variable. The address of the first element in an array is known as the\n arrays pointer. You can use a special symbol called the 'dereference operator' to get the value at the\n address a pointer points to.\n\nYou can create one-dimensional, two-dimensional, or multi-dimensional arrays in C. 'Dimension' refers to\nhow many indices you need to find a specific element in the array.\n\nPointers and One-dimensional Arrays:-\nIn a one-dimensional array, each element is identified by a single integer:\n                         int a[5] = {1, 2, 3, 4, 5};\nHere, the number '1' is at the 0th index, '2' at index 1, and so on.\n\nPointers and Two-dimensional Arrays:-If a one-dimensional array is like a list of elements, a two-dimensional\narray is like a table or a matrix.The elements in a 2D array can be considered to be logically arranged in\nrows and columns. Hence, thelocation of any element is decided by two indices, its row number and column\nnumber. Both row and column indexes start from '0' - int arr[2][2];\n\nExample:       int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};\n               int (*ptr)[3] = arr;  Pointer to an array of 3 integers\n               printf('%d', *(*(ptr + 1) + 2));   Outputs: 6"} </pre> ></Theory>}
            {page === 19 && <Question question="1. Write a C program that declares an integer pointer, assigns it the address of an integer variable, and prints both the address and the value using the pointer?" soln="Initial value of num: 10\n Value of num after dereferencing the pointer: 20" renderQ={renderQ} />}
            {page === 20 && <Question question="2. Write a program that demonstrates a NULL pointer. Initialize a pointer to NULL, check if it is NULL, and print a message if the pointer is uninitialized." soln="The pointer is NULL. It is uninitialized." renderQ={renderQ} />}
            {page === 21 && <Question question="3. Create a C program that demonstrates pointer arithmetic. Declare an integer array, assign a pointer to the first element, and increment the pointer to access and print all the elements in the array." soln="Array elements using pointer arithmetic:\nElement 0: 10\nElement 1: 20\nElement 2: 30\nElement 3: 40\nElement 4: 50" renderQ={renderQ} />}
            {page === 22 && <Question question="4. Write a C program that defines an array of 5 integers. Use a pointer to print the elements of the array by incrementing the pointer." soln="Array elements using pointer increment:\nElement 0: 5\nElement 1: 10\nElement 2: 15\nElement 3: 20\nElement 4: 25" renderQ={renderQ} />}
            {page === 23 && <Question question="5. Write a program that demonstrates the use of a double pointer. Declare an integer, a pointer to that integer, and a pointer to that pointer. Use the double pointer to print the value of the integer." soln="Value of num: 42" renderQ={renderQ} />}
            {page === 24 && <Question question="6. Write a program that demonstrates a function pointer. Define a function that prints a message, create a pointer to the function, and use the pointer to call the function." soln="Hello, this is a message from the function!" renderQ={renderQ} />}
            {page === 25 && <Question question="7. Write a program that declares a 2D array and uses pointer notation to print all its elements. Demonstrate how pointer arithmetic can be used to navigate through a 2D array." soln="Elements of the 2D array using pointer arithmetic:\n1 2 3 4 \n5 6 7 8 \n9 10 11 12 " renderQ={renderQ} />}
            {page === 26 && <Question question="8. Write a C program that defines an array and creates a pointer to the entire array. Use the pointer to print all elements of the array and explain how the pointer behaves differently from a normal pointer to the first element." soln="Elements of the array using a pointer to the entire array:\n10 20 30 40 50 \nElements of the array using a pointer to the first element:\n10 20 30 40 50 " renderQ={renderQ} />}
            {page === 27 && <Question question="9. Write a program that dynamically allocates memory for an integer array of size 10 using malloc(). Use a pointer to access and print the array elements, and then free the allocated memory." soln="Elements of the dynamically allocated array: 10 20 30 40 50 60 70 80 90 100" renderQ={renderQ} />}
            {page === 28 && <Question question="10. Write a C program that declares an array of 5 integer pointers. Assign each pointer to different integers and print the values using pointer dereferencing." soln="Values using pointer dereferencing:\nValue at pointer 1: 10\nValue at pointer 2: 20\nValue at pointer 3: 30\nValue at pointer 4: 40\nValue at pointer 5: 50" renderQ={renderQ} />}
            {page === 33 && <Completed />}
        </div>
    )
}


export default Milestonefive;