import React from "react";
import Theory from "../Reuse/Theory";
import Question from "../Reuse/Question";
import swal from "sweetalert";
import { Button } from "@mui/material";
import Quiz from "../Reuse/Quiz";
import { useDispatch, useSelector } from "react-redux";
import axios from "axios";
import { addtabs } from "../redux/userDispatch";

function Milestonesix() {
    const [page, setPage] = React.useState(0);
    const tabs = useSelector((state) => state.levels);
    const user = useSelector((state) => state.user.username);
    const dispatch = useDispatch();
    React.useEffect(() => {
        setPage(Number(tabs.tabs));
    }, []);

    function renderQ() {
        let nextTabs = Number(tabs.tabs) + 1;
        dispatch(addtabs(nextTabs));
        setPage(page + 1);

    }

    function Completed() {
        swal("Congrat on Completing Milestone 4");
        return (<center><Button style={{ marginTop: "40%" }}>Next Milestone</Button></center>);
    }

    return (
        <div>
            {page === 0 && < Quiz question="What is the correct way to declare an array of 5 integers in C?" one="int array[5];" two="array int[5];" three="int[5] array;" four="array = int[5];" soln="int array[5];" renderQ={renderQ} />}
            {page === 1 && <Theory heading="Arrays in C" theory=<pre> {"• Arrays are used to store multiple values in a single variable, instead of declaring separate variables \n for each value.\n\n • To create an array, define the data type (like int) and specify the name of the array followed by square\n brackets [].\n\n • To insert values to it, use a comma-separated list, inside curly braces:\n\n a) To create an array:\n   1. Choose the data type: Decide what type of values you want to store (like int for whole numbers).\n   2. Name the array: Give your array a name.\n   3. Add square brackets: Use square brackets [] after the name.\n   4. Add values: List the values you want to store inside curly braces {}, separated by commas.\n\n     int myNumbers[] = {25, 50, 75, 100};  // This array stores four numbers.\n     Here, myNumbers is an array that holds the numbers 25, 50, 75, and 100.\n\n b) Access the Elements of an Array:-\n\n   To get a specific value from an array, you need to use something called an index number. Think of the\n index as the position of the value in the array."}</pre> renderQ={renderQ} />}
            {page === 2 && <Theory heading="Arrays in C" theory=<pre> {"• Array Indexes Start at 0: This means that the very first item in the array is at position [0]. The second\n item is at [1], the third item is at [2], and so on. So, [0] is the starting point, not [1].\n\n• How to Access an Element: If you want to get a value from the array, you refer to its index number inside\n square brackets [].\n\nFor example, if you have an array named myNumbers that looks like this:\nint myNumbers[] = {25, 50, 75, 100};\nTo access the value of the first element, you use the index [0]:myNumbers[0];\n\n c) Loop through an Array:-\nImagine you have a list of numbers, and you want to go through each number one by one. You can use something\n called a 'for loop' to help you do this.Here a simple example with some numbers:\n 1. Create a list of numbers:\n    int myNumbers[] = {25, 50, 75, 100};   This is like having a list of four numbers.\n\n 2. Set up the loop:\n    int i;\n    for (i = 0; i < 4; i++) {\n    printf('%d\n', myNumbers[i]);\n}\n "}</pre> renderQ={renderQ} />}
            {page === 3 && < Quiz question="int arr[5] = {1, 2, 3, 4, 5};\n If you want to insert the value 6 at the end of the array (assuming it has space), which of the following is the correct approach?" one="arr[5] = 6" two="arr[4] = 6;" three="arr[6] = 6;" four="Inserting into an array of fixed size is not allowed." soln="Inserting into an array of fixed size is not allowed." renderQ={renderQ} />}
            {page === 4 && <Theory heading="Arrays in C" theory=<pre> {"You can put almost whatever you want inside a function. The purpose of the function is to save the code, \n and execute it when you need it.Like in the example below, we have created a function to calculate the \n sum of two numbers. Whenever you are ready to execute the function (and perform the calculation), you\n just call it: \n\n Example: \n\n void calculateSum() { \n   int x = 5; \n   int y = 10; \n   int sum = x + y; \n   printf('The sum of x + y is: %d', sum); \n } \n int main() { \n  calculateSum();  // call the function \n  return 0; \n } \n \n   // Outputs The sum of x + y is: 15"} </pre> renderQ={renderQ} />}
            {page === 5 && <Theory heading="Arrays in C" theory=<pre> {"int i; - This is like saying, 'I shall use this i to keep track of where I am in the list.'\n for (i = 0; i < 4; i++) - This means, 'Start at the beginning (0), and keep going until you reach the end\n of the list (4).'\n printf('%d', myNumbers[i]); - This tells the computer to show each number in the list.\n\n d) Set the size of an Array:-\n Define the Size of the Array: You start by saying how many boxes (or spots) you want in your array.\n For example, if you want 4 boxes, you write:\n\n int myNumbers[4];\n Here, int means the boxes will hold numbers, and [4] means there are 4 boxes.\n\n Add Values to the Array: After defining the size, you can fill each box with a number. Each box is labeled\n with a number starting from 0. For example:\n     myNumbers[0] = 25;  // Put 25 in the first box\n     myNumbers[1] = 50;  // Put 50 in the second box\n     myNumbers[2] = 75;  // Put 75 in the third box\n     myNumbers[3] = 100; // Put 100 in the fourth box\n\n e) Making Better Loops:-\n  In the last chapter, when we wrote loops for arrays, we used a fixed number (like 4) in the loop condition\n  (i < 4). This is not the best way because it only works for arrays that are that specific size."} </pre> renderQ={renderQ} />}
            {page === 6 && < Quiz question="How would you delete the element at index 2 from the array int arr[] = {10, 20, 30, 40, 50};?" one="Move the elements after index 2 to the left." two="Just set arr[2] to 0." three="Use the delete keyword." four="Arrays in C do not support deletion." soln="Move the elements after index 2 to the left." renderQ={renderQ} />}
            {page === 7 && <Theory heading="Arrays in C" theory=<pre> {"Now, by using the 'sizeof' formula we learned earlier, we can create loops that work for arrays of any size.\n This is a better and more flexible way to do it.\n\n1. Array Declaration: int myNumbers[] = {25, 50, 75, 100};\n  This line creates an array called myNumbers that holds four integers: 25, 50, 75, and 100.\n\n2. Loop Variable: int i;\   This line declares a variable i, which will be used as a counter in the loop.\n\n3. For Loop: for (i = 0; i < 4; i++) {\n  This sets up a loop that starts with i at 0. It continues to run as long as i is less than.After each loop,\n  i is increased by 1.\n\n4. Printing Array Elements:printf('%d', myNumbers[i]);\n\nInside the loop, this line prints the value of the current element of myNumbers (using i to access the\n specific element) followed by a new line."} </pre> renderQ={renderQ} />}
            {page === 8 && <Theory heading="Types of Array" theory=<pre> {"1. Two-Dimensional Arrays:A two-dimensional array is a data structure that consists of a collection of\n elements organized in a grid format, specifically in rows and columns. It can be visualized as a table\n where each cell can hold a value.\n• Organized in rows and columns.\n• Useful for representing matrices, tables, or grids\n• Declared using two indices for access.\n\n Syntax:- data_type array_name[rows][columns];\n Eg: int matrix[3][4];\n\n2. Multidimensional Arrays:Multidimensional arrays are an extension of two-dimensional arrays and can have\n three or more dimensions. They are used to represent data in more complex structures, such as tensors in\n mathematical computations or multidimensional data sets.\n• Extend the concept to three or more dimensions.\n• Useful for more complex data structures, such as 3D models or multi-layered data.\n• Accessed using multiple indices, corresponding to each dimension.\nSyntax:- data_type array_name[dim1][dim2][dim3];\nEg: int cube[2][3][4];"} </pre> renderQ={renderQ} />}
            {page === 9 && <Theory heading="Array Operations: Insertion and Deletion in C" theory=<pre> {"Arrays in C are a collection of elements of the same type stored in contiguous memory locations. To work\n with arrays efficiently, you often need to insert or delete elements. Here's a simple explanation of\n insertion and deletion operations.\n\na) Insertion in an Array:- Insertion refers to adding an element to a specific position in an array. Since\n   arrays have a fixed size, you may need to adjust the other elements when inserting a new one.\n\n Steps for Insertion:\n1. Identify the position: First, decide where you want to insert the new element (e.g., at the start,middle,\n    or end).\n2. Shift elements: Starting from the last element, shift all elements one position to the right to make\n   space for the new element.\n3. Insert the new value: Place the new element at the desired position.\n4. Update the size: If you keep track of the array size, increase the size by one.\n\n   Example:You have an array {10, 20, 30, 40} and you want to insert 25 at position 2 (index 1):\n        1. Shift elements {30, 40} to the right.\n        2. Insert 25 at position 2.\n        3. New array: {10, 25, 20, 30, 40}."} </pre> renderQ={renderQ} />}
            {page === 10 && <Theory heading="Array Operations: Insertion and Deletion in C" theory=<pre> {"b) Deletion from an Array:- Deletion is the process of removing an element from a specific position in\n the array. After deletion, the remaining elements must be shifted to fill the gap.\n\nSteps for Deletion:\n1. Identify the position: Decide which element to delete (e.g., the first, last, or middle element).\n2. Shift elements: Starting from the position of the deleted element, shift all the following elements\n   one position to the left to fill the gap.\n3. Update the size: Decrease the array size by one (if applicable).\n\n   Example:You have an array {10, 20, 30, 40} and want to delete the element at position 2 (index 1):\n        1. Shift elements {30, 40} to the left.\n        2. New array: {10, 30, 40}.\n\nLimitations:\n• Arrays in C have a fixed size, so inserting new elements may not be possible if the array is full.\n• Deleting an element only changes the logical structure of the array (you'll still have the physical\n memory occupied unless explicitly freed)."} </pre> renderQ={renderQ} />}
            {page === 11 && <Theory heading="Strings in C" theory=<pre> {"In C, a string is a sequence of characters terminated by a null character ('\0'). C does not have a\n built-in string type; instead, strings are represented as arrays of characters. The null terminator is\n essential as it indicates the end of the string.\n\nTypes of Strings:-\n1. Character Arrays:The most basic representation of a string in C is through an array of characters.\n   For example: a) char myString[20];    // Declaration of a character array that can hold up to 19 char\n\n2. String Literals:A string literal is a sequence of characters enclosed in double quotes. For instance:\n   char *greeting = 'Hello, World!';  String literals are stored in read-only memory, and attempting to\n   modify them can lead to undefined behavior. \n\n3. Strings: Strings can also be created dynamically using pointers and dynamic memory allocation\n   (with malloc or calloc). For example: char *dynamicString = (char *)malloc(50 * sizeof(char));\n   // Allocating memory for a string strcpy(dynamicString, 'Dynamic String');\n   // Copying a string into the allocated me"} </pre> renderQ={renderQ} />}
            {page === 12 && < Quiz question="Which of the following correctly defines a string in C?" one="char str[10] = 'Hello';" two="string str = 'Hello';" three="char str = 'Hello';" four="char str[5] = 'Hello';" soln="" renderQ={renderQ} />}
            {page === 13 && <Theory heading="String Functions" theory=<pre> {"C also has many useful string functions, which can be used to perform certain operations on strings.\n\nTo use them, you must include the <string.h> header file in your program:\n•String Length:- to get the length of a string, you can use the strlen() function:\n\n•Size of a string:- we used sizeof to get the size of a string/array. Note that sizeof and strlen behaves\n differently, as sizeof also includes the \0 character when counting.\n\n•Concatenate Strings:- To concatenate (combine) two strings, you can use the strcat() function.\n\n•Copy Strings:- To copy the value of one string to another, you can use the strcpy() function.\n\n•To Compare Strings:- To compare two strings, you can use the strcmp() function.It returns 0 if the two\n strings are equal, otherwise a value that is not 0.\n\n\nYou have already learned that printf() is used to output values in C.To get user input, you can use the\nscanf() function. The scanf() function also allow multiple inputs (an integer and a character in the\nfollowing example"} </pre> renderQ={renderQ} />}
            {page === 14 && <Question question="Write a C program that initializes an integer array with the values {1, 2, 3, 4, 5} and prints each element of the array using a for loop." soln="1 2 3 4 5 " renderQ={renderQ} />}
            {page === 15 && <Question question="Write a C program that initializes a character array (string) with the value 'Hello' and prints the string in reverse order." soln='olleH' renderQ={renderQ} />}
            {page === 16 && <Question question="Write a C program that creates an integer array of size 10 and sets all elements to 0. Then, print the array to verify the values." soln="0 0 0 0 0 0 0 0 0 0" renderQ={renderQ} />}
            {page === 17 && <Question question="Write a C program that initializes a string with the value 'Programming' and counts how many vowels (a, e, i, o, u) are present in the string." soln="Number of vowels in 'Programming': 1" renderQ={renderQ} />}
            {page === 18 && <Question question="Write a C program that initializes two character arrays: 'First' and 'Second'. Concatenate them into a third character array and print the result." soln="Concatenated String: FirstSecond" renderQ={renderQ} />}
            {page === 19 && <Question question="Write a C program that defines a function deleteFromStart which takes an integer array and deletes the first element from the array. The array is initially {10, 20, 30, 40, 50}, and after deletion, print the modified array." soln="The sum of the digits of 3456 is: 18" renderQ={renderQ} />}
            {page === 20 && <Question question="Write a C program that defines a function sum_of_squares which calculates and returns the sum of the squares of the numbers 1 through 10. Call this function in the main function and print the result." soln="Modified Array: 20 30 40 50" renderQ={renderQ} />}
            {page === 21 && <Question question="Write a C program that defines a function insertAtPosition which inserts the value 25 at the 3rd position of the array {10, 20, 30, 40, 50}. After insertion, print the updated array." soln="Updated Array: 10 20 25 30 40 50" renderQ={renderQ} />}
            {page === 22 && <Question question="Write a C program that defines a function deleteAtPosition which deletes the element at the 2nd position from the array {5, 10, 15, 20, 25}. After deletion, print the modified array." soln="Modified Array: 5 15 20 25" renderQ={renderQ} />}
            {page === 23 && <Question question="Write a C program that defines a function findMax which takes an integer array and returns the maximum value in the array {1, 7, 3, 9, 5}. Print the maximum value in the main function" soln="Maximum value in the array: 9" renderQ={renderQ} />}
            {page === 24 && <Completed />}
        </div>
    )

}
export default Milestonesix;